#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/op-codes-nft.fc";
#include "imports/params.fc";
#include "imports/jetton-utils.fc";
;; NFT collection smart contract

;; storage scheme
;; default#_ royalty_factor:uint16 royalty_base:uint16 royalty_address:MsgAddress = RoyaltyParams;
;; storage#_ owner_address:MsgAddress next_item_index:uint64
;;           ^[collection_content:^Cell common_content:^Cell]
;;           nft_item_code:^Cell
;;           royalty_params:^RoyaltyParams
;;           = Storage;

(slice, int, cell, cell, cell, cell, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return
            (ds~load_msg_addr(), ;; owner_address
                    ds~load_uint(64), ;; next_item_index
                    ds~load_ref(), ;; content
                    ds~load_ref(), ;; nft_item_code
                    ds~load_ref(),  ;; royalty_params
                    ds~load_ref(), ;; type limits || ERA bytecode || mint_history
                    ds~load_msg_addr() ;; ERA Address
            );
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params, cell type_limits, slice ERA_ADDRESS, cell ERA_BYTE_CODE, cell mint_history) impure inline {
    set_data(begin_cell()
            .store_slice(owner_address)
            .store_uint(next_item_index, 64)
            .store_ref(content)
            .store_ref(nft_item_code)
            .store_ref(royalty_params)
            .store_ref(begin_cell().store_dict(type_limits).store_ref(ERA_BYTE_CODE).store_dict(mint_history).end_cell())
            .store_slice(ERA_ADDRESS)
            .end_cell());
}

(int, int) encode_number_to_text(int number) {
    int len = 0;
    int value = 0;
    int mult = 1;
    do {
        (number, int res) = number.divmod(10);
        value = value + (res + 48) * mult;
        mult = mult * 256;
        len = len + 1;
    } until (number == 0);
    return (len, value);
}

cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

() deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content, cell type_limits) impure {
    cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(workchain(), state_init);
    var (len, value) = encode_number_to_text(item_index);
    slice address_owner_slice = nft_content.begin_parse();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(nft_address)
            .store_coins(amount)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(
                    begin_cell()
                            .store_slice(address_owner_slice~load_msg_addr())
                            .store_ref(type_limits)
                            .store_ref(
                                    begin_cell()
                                            .store_uint(value, len * 8)
                                            .end_cell())
                            .end_cell()
            );
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() send_royalty_params(slice to_address, int query_id, slice data) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
            .store_slice(to_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::report_royalty_params(), 32)
            .store_uint(query_id, 64)
            .store_slice(data);
    send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    var (owner_address, next_item_index, content, nft_item_code, royalty_params, type_limits_byte, ERA_ADDRESS) = load_data();

    slice data_tuple = type_limits_byte.begin_parse();
    cell type_limits = data_tuple~load_dict();
    cell ERA_BYTE_CODE = data_tuple~load_ref();
    cell mint_history = data_tuple~load_dict();
    if (op == op::get_royalty_params()) {
        send_royalty_params(sender_address, query_id, royalty_params.begin_parse());
        return ();
    }


    if (op == op::transfer_notification()) { ;; deploy new nft
        var send_amount = in_msg_body~load_coins(); ;; how much ERA
        throw_unless(402, send_amount >= 10000000); ;; at least 0.01 ton
        throw_unless(707,
                equal_slices(calculate_user_jetton_wallet_address(my_address(), ERA_ADDRESS, ERA_BYTE_CODE), sender_address)
        );
        var sender_origin_wallet = in_msg_body~load_msg_addr(); ;; whose wallet transferred
        cell deploy_list = in_msg_body~load_ref();
        int counter = 0;
        var how_many = send_amount / 10000000;

        do {
            var (item_index, item, f?) = deploy_list~udict::delete_get_min(64);
            if (f?) {
                counter += 1;
                if (counter >= 250) { ;; Limit due to limits of action list size
                    throw(399);
                }
                if(counter > how_many){
                    throw(400);
                }

                deploy_nft_item(next_item_index, nft_item_code, item~load_coins(), item~load_ref(), type_limits);
                next_item_index += 1;
            }
        } until ( ~ f?);
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, type_limits, ERA_ADDRESS, ERA_BYTE_CODE, mint_history);
        return ();
    }
    if(op == 2){
        (slice payload, int success) = mint_history.udict_get?(256, slice_hash(sender_address));
        if(success){
            throw(403);
        }
        mint_history = mint_history.udict_set(256, slice_hash(sender_address), begin_cell().store_uint(1, 1).end_cell().begin_parse());
        deploy_nft_item(next_item_index, nft_item_code, in_msg_body~load_coins(), in_msg_body~load_ref(), type_limits);
        next_item_index += 1;
        save_data(owner_address, next_item_index, content, nft_item_code, royalty_params, type_limits, ERA_ADDRESS, ERA_BYTE_CODE, mint_history);
        return ();
    }
    throw_unless(401, equal_slices(sender_address, owner_address));


    if (op == 3) { ;; change owner
        slice new_owner = in_msg_body~load_msg_addr();
        save_data(new_owner, next_item_index, content, nft_item_code, royalty_params, type_limits, ERA_ADDRESS, ERA_BYTE_CODE, mint_history);
        return ();
    }
    if (op == 4) { ;; claim tokens
        var jetton_wallet = calculate_user_jetton_wallet_address(my_address(), ERA_ADDRESS, ERA_BYTE_CODE);
        var fee_amount = in_msg_body~load_coins();
        var claim_amount = in_msg_body~load_coins();
        var response_address = in_msg_body~load_msg_addr();
        var msg = begin_cell()
                .store_uint(0x18, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(jetton_wallet)
                .store_coins(fee_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::transfer_ERA(), 32)
                .store_uint(0, 64)
                .store_coins(claim_amount)
                .store_slice(owner_address)
                .store_slice(response_address)
                .store_dict(new_dict())
                .store_coins(0)
                .store_uint(0, 1);
        send_raw_message(msg.end_cell(), 1); ;; paying fees, revert on errors
        return ();
    }
    throw(0xffff);
}

;; Get methods

(int, cell, slice) get_collection_data() method_id {
    var (owner_address, next_item_index, content, _, _, _, _) = load_data();
    slice cs = content.begin_parse();
    return (next_item_index, cs~load_ref(), owner_address);
}

(int, slice) get_type_limit(int index) method_id {
    var (_, _, _, _, _, type_limits_byte, _) = load_data();

    slice cs = type_limits_byte.begin_parse();
    (slice payload, int success) = cs~load_dict().udict_get?(64, index);
    throw_unless(98, success);

    int limit = payload~load_uint(64);
    return (limit, payload);
}

int user_counter(slice sender_address) method_id {
    var (_, _, _, _, _, type_limits_byte, _) = load_data();
    slice data_tuple = type_limits_byte.begin_parse();
    data_tuple~load_dict();
    data_tuple~load_ref();
    cell mint_history = data_tuple~load_dict();
    (slice payload, int success) = mint_history.udict_get?(256, slice_hash(sender_address));
    return success;
}

slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code, _, _,_) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(workchain(), state_init);
}

(int, int, slice) royalty_params() method_id {
    var (_, _, _, _,royalty, _,_) = load_data();
    slice rs = royalty.begin_parse();
    return (rs~load_uint(16), rs~load_uint(16), rs~load_msg_addr());
}

cell get_nft_content(int index, cell individual_nft_content) method_id {
    var (_, _, content, _, _, _,_) = load_data();
    slice cs = content.begin_parse();
    cs~load_ref();
    slice common_content = cs~load_ref().begin_parse();
    return (begin_cell()
            .store_uint(1, 8) ;; offchain tag
            .store_slice(common_content)
            .store_ref(individual_nft_content)
            .end_cell());
}