#pragma version >=0.2.0;

#include "imports/stdlib.fc";
#include "imports/op-codes-nft.fc";
#include "imports/params.fc";

int min_tons_for_storage() asm "50000000 PUSHINT"; ;; 0.05 TON

;;
;;  Storage
;;
;;  uint64 index
;;  MsgAddressInt collection_address
;;  MsgAddressInt owner_address
;;  cell content
;;

(int, int, slice, cell, slice, cell, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
        var (characteristics, owner_address, content, nft_item_code) = ( ds~load_dict(), ds~load_msg_addr(), ds~load_ref(), ds~load_ref());
        return (-1, index, collection_address, characteristics, owner_address, content, nft_item_code);
    } else {
        return (0, index, collection_address, null(), null(), null(), null()); ;; nft not initialized yet
    }
}
cell calculate_nft_item_state_init(int item_index, slice nft_collection, cell nft_item_code) {
    cell data = begin_cell().store_uint(item_index, 64).store_slice(nft_collection).end_cell();
    return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell().store_uint(4, 3)
            .store_int(wc, 8)
            .store_uint(cell_hash(state_init), 256)
            .end_cell()
            .begin_parse();
}

() store_data(int index, slice collection_address, cell characteristics, slice owner_address, cell content, cell nft_item_code) impure {
    set_data(
            begin_cell()
                    .store_uint(index, 64)
                    .store_slice(collection_address)
                    .store_dict(characteristics)
                    .store_slice(owner_address)
                    .store_ref(content)
                    .store_ref(nft_item_code)
                    .end_cell()
    );
}

() send_msg(slice to_address, int amount, int op, int query_id, builder payload, int send_mode) impure inline {
    var msg = begin_cell()
            .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 010000
            .store_slice(to_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op, 32)
            .store_uint(query_id, 64);

    if (~ builder_null?(payload)) {
        msg = msg.store_builder(payload);
    }

    send_raw_message(msg.end_cell(), send_mode);
}

() transfer_ownership(int my_balance, int index, slice collection_address, slice owner_address, cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, cell chars, cell nft_item_code) impure inline {
    throw_unless(401, equal_slices(sender_address, owner_address));

    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    slice response_destination = in_msg_body~load_msg_addr();
    in_msg_body~load_int(1); ;; this nft don't use custom_payload
    int forward_amount = in_msg_body~load_coins();

    int rest_amount = my_balance - min_tons_for_storage();
    if (forward_amount) {
        rest_amount -= (forward_amount + fwd_fees);
    }
    int need_response = response_destination.preload_uint(2) != 0; ;; if NOT addr_none: 00
    if (need_response) {
        rest_amount -= fwd_fees;
    }

    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response

    if (forward_amount) {
        send_msg(new_owner_address, forward_amount, op::ownership_assigned(), query_id, begin_cell().store_slice(owner_address).store_slice(in_msg_body), 1);  ;; paying fees, revert on errors
    }
    if (need_response) {
        force_chain(response_destination);
        send_msg(response_destination, rest_amount, op::excesses(), query_id, null(), 1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, chars, new_owner_address, content, nft_item_code);
}


() lock(int my_balance, int index, slice collection_address, slice owner_address,
        cell content, slice sender_address, int query_id, slice in_msg_body, int fwd_fees, cell chars, cell nft_item_code) impure inline {
    slice new_owner_address = in_msg_body~load_msg_addr();
    force_chain(new_owner_address);
    cell other_nfts = in_msg_body~load_maybe_ref();
    slice relay_info = in_msg_body~load_ref().begin_parse();
    (int last_index,slice claimed_prev_owner) = (relay_info~load_uint(64), relay_info~load_msg_addr());
    if(~ equal_slices(sender_address, owner_address)){
        cell state_init = calculate_nft_item_state_init(last_index, collection_address, nft_item_code);
        slice prev_nft_address = calculate_nft_item_address(workchain(), state_init);
        throw_unless(401, equal_slices(sender_address, prev_nft_address) & equal_slices(claimed_prev_owner, owner_address));
    }

    int rest_amount = my_balance - min_tons_for_storage();
    rest_amount -= fwd_fees;
    slice next_nft_address = null();
    int relayer = false;
    var (key, cs, f?) = other_nfts~udict::delete_get_min(64);
    if (f?) {
        next_nft_address = cs~load_msg_addr();
        rest_amount -= fwd_fees;
        relayer = true;
    }


    throw_unless(402, rest_amount >= 0); ;; base nft spends fixed amount of gas, will not check for response
    int totalPower = 0;
    var key2 = -1;
    do {
        (key2, slice char_data, int f2) = chars.udict_get_next?(64, key2);
        if (f2) {
            totalPower += char_data~load_uint(64);
        }
    } until (~ f2);
    send_msg(new_owner_address, fwd_fees, op::lock_nft(), query_id,
            begin_cell().store_uint(index, 64).store_slice(owner_address).store_uint(totalPower, 64), 1);  ;; paying fees, revert on errors
    if (relayer) {
        force_chain(next_nft_address);
        send_msg(next_nft_address, rest_amount, op::lock(), query_id,
                begin_cell().store_slice(new_owner_address).store_maybe_ref(other_nfts).store_ref(begin_cell().store_uint(index, 64).store_slice(owner_address).end_cell()),
                1); ;; paying fees, revert on errors
    }

    store_data(index, collection_address, chars, new_owner_address, content, nft_item_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs


    (int init?, int index, slice collection_address, cell characteristics, slice owner_address, cell content, cell nft_item_code) = load_data();
    if (~ init?) {
        throw_unless(405, equal_slices(collection_address, sender_address));
        var owner_sender = in_msg_body~load_msg_addr();
        cell characteristics_storage = in_msg_body~load_ref();
        cell nft_item_code_init = in_msg_body~load_ref();
        int key = -1;
        ;; generate dict
        cell dict = new_dict(); ;; dict#_ characterstic_index:uint64 characterstic_limit:^uint64

        do {
            (key, slice css, int f) = characteristics_storage.udict_get_next?(64, key);
            if (f) {
                dict~udict_set(64, key, begin_cell().store_uint(rand(css~load_uint(64)), 64).end_cell().begin_parse());
            }
        } until (~ f);
        store_data(index, collection_address, dict, owner_sender, in_msg_body~load_ref(), nft_item_code_init);
        return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::transfer()) {
        transfer_ownership(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, characteristics, nft_item_code);
        return ();
    }
    if (op == op::lock()) {
        lock(my_balance, index, collection_address, owner_address, content, sender_address, query_id, in_msg_body, fwd_fee, characteristics, nft_item_code);
        return ();
    }
    if (op == op::get_static_data()) {
        send_msg(sender_address, 0, op::report_static_data(), query_id, begin_cell().store_uint(index, 256).store_slice(collection_address), 64);  ;; carry all the remaining value of the inbound message
        return ();
    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, int, slice, slice, cell) get_nft_data() method_id {
    (int init?, int index, slice collection_address, _, slice owner_address, cell content, _) = load_data();
    return (init?, index, collection_address, owner_address, content);
}

(int, slice) get_key(int index) method_id {
    (_, _, _, cell characteristics, _, _, _) = load_data();
    (slice payload, int success) = characteristics.udict_get?(64, index);
    throw_unless(98, success);

    int value = payload~load_uint(64);
    return (value, payload);
}